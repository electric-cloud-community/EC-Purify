<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta name="generator" content=
  "HTML Tidy for Windows (vers 25 March 2009), see www.w3.org" />
  <meta content="text/html; charset=us-ascii" http-equiv=
  "content-type" />

  <title>ElectricFlow Plugin for @PLUGIN_KEY@</title>
  <link rel="stylesheet" href=
  "../../plugins/@PLUGIN_KEY@/pluginhelp.css" type="text/css"
  media="screen" />
</head>

<body>
  <div class="help">
    <h1>Purify</h1>

    <p>Plugin Version @PLUGIN_VERSION@</p>
    <hr style=
    "margin-left: -10px; margin-top: 10px; height: 1px; width: 100%; color: #5981BD;"
    noshade="noshade" />
    <!-- The tool description should answer these kinds of questions:
What is the tool itself is used for in the development
process? Who would use this tool? What is the general use-case or
problem that this tool solves? Look at the tool's documentation or
website(s) to get their own descriptions. Look at Wikipedia or other
outside websites. If there is a Hudson plugin, read their
documentation for ideas, examples, etc. It's OK to copy word-for-word
only if appropriate, such as FOSS - but not commercial software.
-->

<p>July 1, 2015</p>

    <p>Purify detects runtime errors, including memory leaks, in
    the application under test and in the components it uses.
    Purify reports memory errors such as array bounds errors,
    access through dangling pointers, uninitialized memory reads,
    memory allocation errors, and memory leaks, so that they can be
    resolved before they do any damage.</p>

    <p>Purify allows dynamic verification, a process by which a
    program discovers errors that occur when the program runs, much
    like a debugger. Static verification or static code analysis,
    by contrast, involves detecting errors in the source code
    without ever compiling or running it, just by discovering
    logical inconsistencies. The type checking by a C compiler is
    an example of static verification.</p>

    <p>When a program is linked with Purify, corrected verification
    code is automatically inserted into the executable by parsing
    and adding to the object code, including libraries. That way,
    if a memory error occurs, the program will print out the exact
    location of the error, the memory address involved, and other
    relevant information. Purify also detects memory leaks. By
    default, a leak report is generated at program exit but can
    also be generated by calling the Purify leak-detection API from
    within an instrumented application.</p>

    <h2>Purify Links</h2>

    <p>More information can be found at <a href=
    "http://www-01.ibm.com/software/awdtools/purify/">IBM Rational
    Purify</a> or <a href=
    "http://rup.juliopari.com/toolment/purify_plus/tm_prfpls_exctstste.htm">
    Executing Test Suites Using the Rational PurifyPlus
    Tools</a>.</p>

    <h2>ElectricFlow Integration to Purify</h2>
    <!-- The integration description should answer the questions:
How deep does our integration go? Why should I care? What general
functionality does the plugin include? What functionality does
the plugin omit?
-->

    <p>@PLUGIN_KEY@ plugin calls the Purify tool via command line
    and passes the user-provided parameters.</p>

    <p>@PLUGIN_KEY@ plugin includes the most important features
    provided by the Purify tool, also allows some extra
    funcionality to make the test more configurable according to
    specific needs.</p>

    <p>ElectricFlow itself provides some advantages like
    parameters checking, easy functionality selection using only
    check boxes or radio buttons, hitorical log reports, procedure
    duration statistics, simple credentials attachment, real time
    analysis of the log been generated, among others.</p>

    <h2>Integrated Version</h2>

    <p>This plugin was developed and tested against Purify version
    7.0.1.0.</p>

    <h1>Plugin Procedures</h1>

    <p>IMPORTANT: For all parameter descriptions below, required
    parameters are shown in <span class='required'>bold
    italics</span>.</p>

    <div id="runPurify"><a name='runPurify' id="runPurify"></a>

    <h3>Run Purify</h3>

    <p>This procedure allows the input of all necessary parameters
    along with some extra of them to make the test more
    configurable. When the parameters are defined the Purify
    command is created and run into the Commander. It also creates
    a online log file, which contains the output generated by the
    console.</p>

    <p>If a 'Result filename' is provided a file with all the
    details will be saved in the given directory. To select the
    type of file to be saved choose on 'Result file type' between
    'Text' and 'Purify file', the first options saves a .txt file,
    the second option saves a .pfy file.</p>

    <p>When using the logger(s) option only the name of the file
    and its extension must be provided.</p>

    <table class="grid">
      <thead>
        <tr>
          <th>Parameter</th>

          <th>Description</th>
        </tr>
      </thead>

      <tbody>
        <tr>
          <td class='required'>Rational Purify executable path</td>

          <td>Provide the absolute path to the Purify executable.
          Default value assumes Purify.exe is loaded in the system
          path. The absolute path cannot contain
          spaces.(Required)</td>
        </tr>

        <tr>
          <td class='required'>Target to analyze</td>

          <td>Provide the absolute path of the element to
          analyze.Use a test application that can run and stop its
          execution in order to record the results.(Required)</td>
        </tr>

        <tr>
          <td class='required'>Working Directory</td>

          <td>Provide the desired working directory. Leave this
          field blank to use the default workspace.(Required)</td>
        </tr>

        <tr>
          <td>Result filename</td>

          <td>Provide the filename of the resulting log file.(This
          is the command-line '-SaveTextData=' option).</td>
        </tr>

        <tr>
          <td>Result file type</td>

          <td>Select the type of file for the log. Use the Text
          option to generate a txt file and pfy optio for a Purify
          type.(This is the command-line '-SaveData=' option)</td>
        </tr>

        <tr>
          <td>Source path</td>

          <td>Specify the search path to use to locate source files
          to display in your default editor or in the Purify viewer
          window.(This is the command-line '-SourcePath='
          option)</td>
        </tr>

        <tr>
          <td>.NET Managed Application</td>

          <td>Indicates the analysis will run a .NET managed
          application. It's not compatible with Run Coverage
          option(It can't be used both options).(This is the
          command-line '-net' option)</td>
        </tr>

        <tr>
          <td>Auto-Merge Data</td>

          <td>If checked, this enables the auto-merge data
          mode.(This is the command-line '-AutoMergeData=yes/no:'
          option)</td>
        </tr>

        <tr>
          <td>Run Coverage</td>

          <td>Runs Coverage tasks after running Purify.It's not
          compatible with .NET Managed Application option(It can't
          be used both options).(This is the command-line
          '-Coverage' option)</td>
        </tr>

        <tr>
          <td>Additional Commands</td>

          <td>Provide any additional commands to be execute for
          Purify.</td>
        </tr>
      </tbody>
    </table><!--ScreenShots if necessary-->
    <img src="../../plugins/@PLUGIN_KEY@/images/Purify-1.png" alt=
    "screenshot" /></div>

    <h1>Examples and Use Cases</h1>
    <!-- This section is for examples and use cases, including screenshots of the new Parameter Panel with example values filled in.
Unfortunately, I can't tell you what exactly to put here, but it's OK to put what seems like too much! Include both parameter
values and output where appropriate. Use a separate 'h2' header for each example. Under the h2 header try to stay with the style
outline used above where possible.
-->

    <h2>Log file</h2><img src=
    "../../plugins/@PLUGIN_KEY@/images/Purify-2.png" alt=
    "screenshot" />

    <h1>Release Notes</h1>
	
	  <h2>@PLUGIN_KEY@-2.0.4</h2>
        <ul>
            <li>Renamed ElectricCommander to ElectricFlow.</li>
        </ul>
    
    <h2>@PLUGIN_KEY@-2.0.3</h2>
        <ul>
            <li>Fixed manifest file.</li>
        </ul>

    <h2>@PLUGIN_KEY@ 2.0.2</h2>
	<ul>
		<li>Procedure name(s) were changed in the step picker section</li>
	</ul> 
	
    <h2>@PLUGIN_KEY@ 2.0.1</h2>
    <!-- Specific descriptions of additional or changed functionality,
    new parameters, etc. The plugin version header of this section should
    include the speciic build number if possible. Repeat this section for
    each version.
    -->

    <ul>
      <li>Change Help page style.</li>
    </ul>

    <h2>@PLUGIN_KEY@ 2.0.0</h2>

    <ul>
      <li>New XML panel paramenters implementation.</li>

      <li>New help page format.</li>

      <li>New help page display.</li>

      <li>Parameters accept more special characters.</li>
    </ul>
  </div>
</body>
</html>
